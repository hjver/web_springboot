package kr.co.khj.aop;

import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import jakarta.annotation.Resource;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;

@Aspect    //AOP
@Component  //@Component : main2_aop 무조건 실행되도록 함
public class main2_aop {

	Logger log = LoggerFactory.getLogger(this.getClass());
	
	//Controller에서 setter값을 입력받은 사항을 AOP getter로 받아서 추가 코드를 작성하게 됨
	//일반적인 @Resource 처럼 new 클래스를 가져오는 형태가 아님
	@Resource(name="user_DTO")
	user_DTO dto;
	
	@Resource(name="cdn_service")
	cdn_service cs;
	
	//@Before : 해당 Controller가 작동 되기전 실행되는 AOP
	//@After : 해당 Controller가 작동된후 실행되는 AOP
	//execution : 해당 Controller 메소드 실행
	
	@Before("execution(* kr.co.khj.aop.main2_controller.*(..))")
	public void testao_b() {
		this.log.info("aop Before에서 실행되는 로그임");
	}

	
	@After("execution(* kr.co.khj.aop.main2_controller.testaop(..))")
	public void testao_a() {
		try {
			this.log.info("aop After에서 실행되는 로그임");
			this.log.info("this.dto.getMid()");
			HttpServletRequest req = ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest();
			HttpSession se = req.getSession();
			se.setAttribute("user_id", this.dto.getMid());
			se.setAttribute("user_email", this.dto.getMemail());
			
			int result = this.cs.log_table(this.dto.getMid());
			if(result > 0) {
				this.log.info("올바르게 ");
			}
			
		}catch (Throwable e) { //Exception 보다 상위 Throwable 예외처리 부분
			e.printStackTrace();
		}
	}
}
